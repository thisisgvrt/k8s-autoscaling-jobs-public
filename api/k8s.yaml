apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-account
  namespace: default
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: role-test-account
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create"]
- apiGroups: ["batch"]
  resources: ["cronjobs"]
  verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: role-test-account-binding
subjects:
- kind: ServiceAccount
  name: test-account
  namespace: default
roleRef:
  kind: Role
  name: role-test-account
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: kubernetes-node-server-replicaset
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kubernetes-node-server-replicaset
  template:
    metadata:
      labels:
        app: kubernetes-node-server-replicaset
    spec:
      serviceAccountName: test-account
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: my-service
      containers:
      - name: kubernetes-node-server-replicaset
        image: ghcr.io/thisisgvrt/k8s-autoscaling-jobs-api:main
        env:
        - name: JOB_IMAGE_URI
          value: "ghcr.io/thisisgvrt/k8s-autoscaling-jobs-job:main"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        imagePullPolicy: Always
      imagePullSecrets:
          - name: docker-registry-creds
---
apiVersion: v1
kind: Service
metadata:
  name: kubernetes-node-server-replicaset-service
spec:
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
  selector:
    app: kubernetes-node-server-replicaset